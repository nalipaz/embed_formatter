<?php

/**
 * @file
 * Embed Formatter
 */

use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\WidgetInterface;
use Drupal\filter\Plugin\Filter;

/**
 * Implements hook_field_widget_form_alter()
 */
// function embed_formatter_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
//   var_dump($element, $context['widget']);
// }

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function embed_formatter_field_widget_link_form_alter(&$element, FormStateInterface $form_state, $context) {
  _embed_formatter_widget_alter($element, $form_state, $context);
}

function _embed_formatter_widget_alter(&$element, FormStateInterface $form_state, $context) {
  if (isset($element['#type']) && $element['#type'] == 'link') {
    _embed_formatter_widget_text_format_alter($element, $form_state, $context);
  }
  elseif (isset($element['value']) && isset($element['value']['#type'])) {
    switch ($element['value']['#type']) {
      case 'link':
        _embed_formatter_widget_link_alter($element, $form_state, $context);
        break;
    }
  }
}

function _embed_formatter_widget_link_alter(&$element, FormStateInterface $form_state, $context) {
  $widget = $context['widget'];

  if (!\Drupal::moduleHandler()->moduleExists('token') || !_embed_formatter_show_token_tree($widget)) {
    return;
  }

  $entity_type = $context['items']->getEntity()->getEntityTypeId();
  $description = trim($element['#description']);

  if (!empty($description)) {
    if (Unicode::substr($description, -1) != '.') {
      $description .= '. ';
    }
    else {
      $description .= ' ';
    }
  }

  $description .= _embed_formatter_browse_tokens($entity_type);

  $element['#description'] = $description;
  $element['value']['#description'] = $description;
}

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function embed_formatter_field_widget_third_party_settings_form(WidgetInterface $plugin, FieldDefinitionInterface $field_definition, $form_mode, $form, FormStateInterface $form_state) {
  $element = array();

  if (\Drupal::moduleHandler()->moduleExists('token')) {
    switch ($plugin->getPluginId()) {
      case 'link':
        $element['show_token_tree'] = array(
          '#type'          => 'checkbox',
          '#title'         => t("Show available tokens in field's description"),
          '#return_value'  => 1,
          '#default_value' => _embed_formatter_show_token_tree($plugin),
        );

        break;
    }
  }

  return $element;
}

/**
 * Get a link to browse for available tokens.
 *
 * @param mixed $token_types
 *   A string or array contains the token types. See theme_token_tree() for more
 *   details.
 *
 * @return string
 *   A HTML link
 */
function _embed_formatter_browse_tokens($token_types) {
  if (!\Drupal::moduleHandler()->moduleExists('token')) {
    return;
  }

  if (!is_array($token_types)) {
    $token_types = array($token_types);
  }

  $vars['token_types'] = $token_types;

  return \Drupal::theme()->render('token_tree_link', $vars);
}

/**
 * Check if we should display the token tree or not.
 *
 * @param  WidgetInterface $widget
 *   Widget.
 *
 * @return bool
 *   TRUE or FALSE.
 */
function _embed_formatter_show_token_tree($widget) {
  return $widget->getThirdPartySetting('embed_formatter', 'show_token_tree');
}

/**
 * Add available tokens link to text_format element.
 *
 * @param array $element
 *   Form element
 *
 * @return array
 *   Form element
 */
function _embed_formatter_field_add_token_tree($element) {
  $element['format']['show_token'] = array(
    '#type' => 'container',
    'link'  => array(
      '#markup' => _embed_formatter_browse_tokens($element['#entity_type']),
    ),
    '#attributes' => array(
      'class' => array('clearfix'),
    ),
    '#weight' => 99,
  );

  return $element;
}
